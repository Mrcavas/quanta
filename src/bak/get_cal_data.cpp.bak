#include "Arduino.h"
#include "ICM_20948.h"

void printRawAGMT(ICM_20948_AGMT_t agmt);

#define AD0_VAL                                                                \
  0 // The value of the last bit of the I2C address.                \
  // On the SparkFun 9DoF IMU breakout the default is 1, and when \
  // the ADR jumper is closed the value becomes 0

ICM_20948_I2C icm; // Otherwise create an ICM_20948_I2C object

// gyro offset values for calibration
long gyro[3] = {0};
int offset_count = 500;  // average this many values for gyro
int acc_mag_count = 500; // collect this many values for acc/mag calibration

void setup() {
  Serial.begin(115200);
  delay(2000);

  Wire.begin();
  Wire.setClock(400000);

  // myICM.enableDebugging(); // Uncomment this line to enable helpful debug
  // messages on Serial

  bool initialized = false;

  while (!initialized) {
    icm.begin(Wire, AD0_VAL);

    Serial.print("Initialization of the sensor returned: ");
    Serial.println(icm.statusString());
    if (icm.status != ICM_20948_Stat_Ok) {
      Serial.println("Trying again...");
      delay(500);
    } else {
      initialized = true;
    }
  }

  // find gyro offsets
  Serial.println("Hold sensor still for gyro offset calibration ...");
  delay(5000);

  float goff;
  int i;

  for (i = 0; i < offset_count; i++) {
    if (icm.dataReady()) {
      icm.getAGMT(); // The values are only updated when you call 'getAGMT'
      gyro[0] += icm.agmt.gyr.axes.x;
      gyro[1] += icm.agmt.gyr.axes.y;
      gyro[2] += icm.agmt.gyr.axes.z;
    }
  } // done with gyro

  Serial.print("Gyro offsets x, y, z: ");
  for (i = 0; i < 3; i++) {
    goff = (float)gyro[i] / offset_count;
    Serial.print(goff, 1);
    Serial.print(", ");
  }
  Serial.println();

  Serial.println(
      "Turn sensor SLOWLY and STEADILY in all directions until done");
  delay(5000);
  Serial.println("Starting...");

  // get values for calibration of acc/mag
  for (i = 0; i < acc_mag_count; i++) {
    if (icm.dataReady()) {
      icm.getAGMT(); // The values are only updated when you call 'getAGMT'
      printRawAGMT(
          icm.agmt); // raw values, taken directly from the agmt structure
      delay(200);
    } else {
      delay(100); // wait for data ready
    }
  }
  Serial.println("Done collecting");
}

void loop() {}

void printRawAGMT(ICM_20948_AGMT_t agmt) {
  Serial.print(agmt.acc.axes.x);
  Serial.print(", ");
  Serial.print(agmt.acc.axes.y);
  Serial.print(", ");
  Serial.print(agmt.acc.axes.z);
  Serial.print(", ");

  Serial.print(agmt.mag.axes.x);
  Serial.print(", ");
  Serial.print(agmt.mag.axes.y);
  Serial.print(", ");
  Serial.print(agmt.mag.axes.z);

  Serial.println();
}